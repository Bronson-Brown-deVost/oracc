#!/usr/bin/perl
use warnings; use strict;
use lib '@@ORACC@@/lib';
use ORACC::L2GLO::Util;

my $superglo = `oraccopt . type`;
my $unify = `oraccopt . cbd-unify`; chomp $unify;

my @proj_sig_langs = ();
my %proj_sig_langs = ();
my %unify = ();

if ($unify) {
    my @unify = split(/\s+/, $unify);
    @unify{@unify} = ();
}

# ensure that all langs plus qpn are in proj_sig_langs if they are 
# represented in project.sig

unless ($superglo eq 'superglo') {
    @proj_sig_langs = split(/\s+/, `sig-langs.sh 01bld/project.sig`);
    %proj_sig_langs = (); @proj_sig_langs{@proj_sig_langs} = ();
    
    @proj_sig_langs = qpn_langs();
    if ($#proj_sig_langs >= 0) {
	@proj_sig_langs{@proj_sig_langs} = ();
	++$proj_sig_langs{'qpn'} unless exists $proj_sig_langs{'qpns'};
    }
}

foreach (<00lib/*.glo>) {
    s#^00lib/(.*?)\.glo$#$1#;
    ++$proj_sig_langs{$1} unless exists $proj_sig_langs{$1};
}

if ($unify) {
    my @d = ();
    foreach my $l (keys %proj_sig_langs) {
	foreach my $u (keys %unify) {
	    if ($l =~ /^$u-/) {
		push @d, $l;
	    }
	}
    }
    foreach my $d (@d) {
	delete $proj_sig_langs{$d};
    }
    foreach my $u (keys %unify) {
	++$proj_sig_langs{$u} unless exists $proj_sig_langs{$u};
    }
}

print join(' ', sort keys %proj_sig_langs);

#####################################################################

sub
qpn_langs {
    my @qpns = split(/\s+/, `sig-qpns.sh 01bld/project.sig`);
    if (-r '00lib/qpn.glo') {
	push @qpns, split(/\s+/, `sig-qpns.sh 00lib/qpn.glo`);
    }
    if ($#qpns >= 0) {
	my %qpnuniq = ();
	@qpnuniq{@ORACC::L2GLO::Util::qpnlangs{@qpns}} = ();
	(keys %qpnuniq);
    } else {
	();
    }
}

1;
